- Implement API +
 - Endpoints:

  Books (+)
  -----------------------------
  - GET /books, /books/:id [public *] +
  - POST /books [staff] +             
  - DELETE /books/:id [staff] +
  - PATCH /books/:id/cover [staff] +
  - PUT /books/:id [staff] +

    Recommendations
    -----------------------------
    - GET /recommendations [user] +

  Genre (+)
  -----------------------------
  - GET /genre-tags, /genre-tags/:id [public *] +
  - PUT /genre-tags/:id (no need ?) X [staff] +

  Customer (+)
  -----------------------------
  - GET /customers, + /customers/:id, + /customers/my-account [user, staff] +
  - POST /customers (signup) [user] +

  !! - DELETE /customers/:id [user, staff] -, +  (when user deletes account, it throws error at backend) !!

  Order (+)
  -----------------------------
  - GET /orders, /orders/:oid, /orders/customers/:cid [user, staff] +
  - DELETE /orders/:id [user] +
  - PATCH /orders/:oid [staff] (complete/approve order) +
  - POST /orders [user] + 

  Auth: JWT - Header Bearer (user, staff) +

  //////
  Author (NO NEED)
  -----------------------------
  - GET /authors, /authors/:id [public *]
  - PUT /authors/:id [staff]

-------------------------------------------------------------------------------------
- Make fully responsive for mobile and web (first mobile, then web) <---

- Apply security practices (validation(zod + rhk form), protection(CSP, XSS..) ...)

- Add 3 level tests(unit, int, e2e) 

- Add CI/CD tools

(after finish)
--------------
- Clean and refactor code

- Polish UI and enhance

- Optimize for performance

- Make cross browser tests

- Make lighthouse tests for all pages 

- Fix bugs
...